
"/app/front/controllers/blogs.controller.php"

  - I shorten the "_get_block()" method to automatically find and load the requested method based on the block string value that was passed to it
  
    block:       [blogs:recent]
    controller:  blogs
    method:      _get_recent_block()
    view:        /skins/front/default/tempalates/blogs/recent.default.block.php
    
    block:       [blogs:recent.green]
    controller:  blogs
    method:      _get_recent_block()
    view:        /skins/front/default/tempalates/blogs/recent.green.block.php

  - I should probably make the block value "[blogs:recent]" a JSON array instead of a custom string    

    { "controller" : "blogs" , "method" : "recent" , "skin" : "default" }
    
    - if "method" is an intager than the controller "blogs" will know which method to load
    - if "skin" is undefined then "default" is used


  - I could make the "_get_block()" method part of the root controller class
  - I'd need to reassign the values for the controller since they are hard-coded right now
  - I'd also have to define the method to use if the method value passed from the JSON array was an intager



"/skins/front/default/layouts/blogs.xml"

  - I don't think I need the <template> values since they will be created using other values like <controller> and <skin>
  - If I use a JSON array for the block values, then I can break apart the <block> children into the actual data indexes

    <block>
      <name>Recent blog post
      <controller>blogs
      <method>recent

    <block>
      <name>Recent blog post with green background
      <controller>blogs
      <method>recent
      <skin>green



"/skins/front/default/templates/blogs/index.template.php"

  - I'm a little confused what makes this a ".template.php"
  - I should probably rethink this since it's kinda confusing how it's different from a ".block.php"



"layouts.controller.php"

  - I need to make layouts it's own controller instead of having it as a method of the "pages" controller
  - That way I can edit the layouts of individual blog post
  - This will of course involve figuring out a way to define the "base" controller that the layouts is using
  - The base will probably be the <layout> of the layouts XML files

  - It makes sense letting pages use any of the "pages.xml" layouts
  - Blogs can't just use any of the "blogs.xml" layouts - only the one for the <skin>post</skin>... if there is one
  - How do I make a page a module?
    - I guess you could load like the first <layout> of every other XML file
    - Then I'd need to make sure that only that page is able to use that <layout>
    - Maybe I include <module> fields in the "pages.xml" file that defines the "controller" and it's "base layout"
      
      <layout>
        <name>Blog Module
        <controller>blogs
        <layout>
          <file>blogs.xml
          <skin>default
      
      - then when editing that page's layout it'll load the "blogs.xml" and get the <layout> with <skin> equal to "default"
   
   - So what happens when the blogs landing page is really just a page layout?
     - Is the system going to force you to create the exact same template file for the blog
     - Maybe using the above method you can assign <file> to "pages.xml" and <skin> to whatever layout has the skin to duplicate
       - So maybe there are only two page layouts: "single column" and "two column with left side bar"
       - Then you just end up assigning every module's layout to either one of those



Side Navigation

  - How am I going to handle side navigation?
    - It really should be automatic like in our current CMS
    - But that would require changing the layout you've loaded if it doesn't have a left side bar
    - I'm probably going to have to make the side navigation a block and make the user add it to every child page




